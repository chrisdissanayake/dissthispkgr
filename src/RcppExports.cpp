// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_hello
List rcpp_hello();
RcppExport SEXP _dissthispkgr_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}
// zernike_expansion
NumericVector zernike_expansion(NumericVector x, NumericVector y, int noll, bool normalized);
RcppExport SEXP _dissthispkgr_zernike_expansion(SEXP xSEXP, SEXP ySEXP, SEXP nollSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type noll(nollSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(zernike_expansion(x, y, noll, normalized));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dissthispkgr_rcpp_hello", (DL_FUNC) &_dissthispkgr_rcpp_hello, 0},
    {"_dissthispkgr_zernike_expansion", (DL_FUNC) &_dissthispkgr_zernike_expansion, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_dissthispkgr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
